
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.util.Iterator;
import java.util.Scanner;

public class DirWalk
{
	
	
	static HashMap<String, Boolean> flaggedExtensions = new HashMap<String, Boolean>();
	
    public static void main(String[] args)
    {
    	System.out.println("aaa");
        // Path target = Paths.get("/u/trevorh/Documents");
        Path target = Paths.get("downloads2/");
        getFileNames(new ArrayList<String>(), target);
        
        System.out.println("NumFlagged: " + flaggedExtensions.size());
    }
    private static List<String> getFileNames(List<String> fileNames, Path dir) {
        try(DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {
            for (Path path : stream) {
                if(path.toFile().isDirectory()) {
                    getFileNames(fileNames, path);
                } else {
                    // fileNames.add(path.toAbsolutePath().toString());
                    // System.out.println(path.getFileName());
                    // System.out.print(path.getFileName().toString());
                    // if(path.getFileName().toString().contains(".js"))
                    //     System.out.println(path.getFileName());
                    if(getFileExtension(path.getFileName().toString()).equals("js")) {
                    	String id = path.toAbsolutePath().toString().split("/")[8];
                    	//System.out.println(id);
                    	if (flaggedExtensions.get(id) == null) {
                    		System.out.println(id);
                    	}
                    	flaggedExtensions.put(id, true);
                        if(findConditions(path)) {
                        	
                        	//String id = path.toAbsolutePath().toString().split("/")[9];
                        	//System.out.println(id);
                        	
//                        	if (flaggedExtensions.get(id) == null) {
//                        		System.out.println(id);
//                        	}
//                        	
//                        	
//                        	flaggedExtensions.put(id, true);
                            System.out.println("\t\tFOUND: " + path.toAbsolutePath().toString());
                        }
                    }

                }
            }
        } catch(IOException e) {
            e.printStackTrace();
        }
        return fileNames;
    } 

    public static String getFileExtension(String fileName)
    {
        if(fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0)
            return fileName.substring(fileName.lastIndexOf(".")+1);
        else 
            return "";
    }

    /**
    *should maybe make more generalized but I'm assuming we're not changing 
    *conditions frequently
    */
    public static boolean findConditions(Path file)
    {
        boolean hasMessageListener = false;
        String messageListener = "addEventListener(\"message";
        boolean hasOrigin = false;
        
        String tokens[] = {".origin.indexOf", ".origin.includes", ".origin.match"}; 
        
       // String origin = ".origin.indexOf";
        boolean hasMessage = false;
        String message = "postMessage";
        String messageRegex = ".*postMessage(.*\"*\"";

        ArrayList<String> lines = new ArrayList<String>();
        Scanner sc = null;
        try
        {
        // lines = Files.readAllLines(file);
            sc = new Scanner(file);
            while(sc.hasNextLine())
            {
                lines.add(sc.nextLine());
            }
        } 
        catch(Exception e)
        {
            // System.out.println("\tEXCEPTION!!!!!!!!!!: "+ e.getMessage() + "//" + e.getClass().getCanonicalName());
            return false;
        }
        finally {
        	if (sc != null)
        		sc.close();
        }
        Iterator<String> iter = lines.iterator();
        while(iter.hasNext() && !(hasMessageListener&&hasOrigin&&hasMessage))
        {
            String line = iter.next();
            if(!hasMessageListener && line.contains(messageListener))
            {
                hasMessageListener = true;
                //function name
                String [] fnArray = line.split(",");
                if(fnArray.length < 2)
                    break;
                String function = fnArray[1].trim();
                Iterator<String> iter2 = lines.iterator();
                boolean functionFound = false;
                //iterate to find function
                while(iter2.hasNext() && !functionFound)
                {
                    String line2 = iter2.next();
                    functionFound = line2.contains("function " + function);
                }
                //check inside of function
                int bracketCount = 1;
                while(iter2.hasNext() && !hasMessage && (bracketCount > 0))
                {
                    String line2 = iter2.next();
                    if(line2.contains("{"))
                        bracketCount++;
                    if(line2.contains("}"))
                        bracketCount--;
                    hasMessage = line2.contains(message);
                }
            }
            if(!hasOrigin) {// && line.contains(origin)) {
            	for (String origin : tokens) {
            		if (line.contains(origin)) hasOrigin = true;
            		
            	}
            }
                
            // if(!hasMessage && line.contains(message))
            //     hasMessage = true;

        }
        return hasMessageListener && hasOrigin && hasMessage;
    }
}




